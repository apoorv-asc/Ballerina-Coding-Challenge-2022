{"projectName":"problem_4_1","totalTests":8,"passed":8,"failed":0,"skipped":0,"coveredLines":67,"missedLines":10,"coveragePercentage":87.01,"moduleStatus":[{"name":"problem_4_1","totalTests":8,"passed":8,"failed":0,"skipped":0,"tests":[{"name":"testDeletingAnOrderSuccessfully1","status":"PASSED"},{"name":"testMenu1","status":"PASSED"},{"name":"testOrderPlacementFailureForInvalidJsonPayloadStructure1","status":"PASSED"},{"name":"testRetrievingOrderStatusForOrderIdWithUpdatedStatus1","status":"PASSED"},{"name":"testOrderPlacementSuccess1","status":"PASSED"},{"name":"testRetrievingOrderStatusWithAValidOrderId1","status":"PASSED"},{"name":"testRetrievingOrderStatusWithAnInvalidOrderId1","status":"PASSED"},{"name":"testUpdatingAnOrderSuccessfully1","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_4_1","coveredLines":67,"missedLines":10,"coveragePercentage":87.01,"sourceFiles":[{"name":"types.bal","coveredLines":[6,8,10,11,13,14],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/constraint;\r\n\r\npublic type OrderRequest record {|\r\n    string username;\r\n    OrderItem[] order_items;\r\n|};\r\n\r\npublic type OrderItem record {|\r\n    readonly EMenuItems item;\r\n    @constraint:Int {\r\n        minValue: 1\r\n    }\r\n    int quantity;\r\n|};\r\n"},{"name":"main.bal","coveredLines":[10,12,14,15,16,19,20,21,24,25,27,29,32,33,35,36,37,39,40,43,44,45,47,48,50,51,52,53,56,57,59,60,61,65,69,73,74,76,77,78,82,85,87,88,89],"missedLines":[41,62,66,70,79,83],"coveragePercentage":88.24,"sourceCode":"import ballerina/log;\r\nimport ballerina/http;\r\n\r\nmap\u003cEOrderStatus\u003e orderStatus \u003d {};\r\n\r\nlistener http:Listener cakeStationListener \u003d new (port);\r\n\r\nservice class RequestInterceptor {\r\n    *http:RequestInterceptor;\r\n    resource function \u0027default [string... path](http:RequestContext ctx, \r\n                        http:Request req) returns http:NextService|error? {\r\n        json|error payload \u003d req.getJsonPayload();\r\n\r\n        if payload is error {\r\n            log:printInfo(string `${req.method} ${req.rawPath}`);\r\n            return ctx.next();\r\n        }\r\n        \r\n        log:printInfo(string `${req.method} ${req.rawPath}`, payload \u003d payload);\r\n        return ctx.next();\r\n    }\r\n}\r\n\r\n@http:ServiceConfig {\r\n    interceptors: [new RequestInterceptor()]\r\n}\r\nservice / on cakeStationListener {\r\n\r\n    private int id \u003d 0;\r\n\r\n    function init() {\r\n        log:printInfo(\"Cake Station Service started successfully!\", port \u003d port);\r\n    }\r\n\r\n    resource function get menu() returns map\u003cint\u003e {\r\n        return menu;\r\n    }\r\n\r\n    resource function post \u0027order(@http:Payload OrderRequest orderRequest) returns http:BadRequest|http:Created {\r\n        if !validateOrderPayload(orderRequest) {\r\n            return \u003chttp:BadRequest\u003e{body: {message: \"Invalid Order Payload.\"}};\r\n        }\r\n        string orderId \u003d int:toHexString(self.id);\r\n        orderStatus[orderId] \u003d \"pending\";\r\n        self.id +\u003d 1;\r\n\r\n        return \u003chttp:Created\u003e{body: {order_id: orderId, total: calculateTotal(orderRequest.order_items)}};\r\n    }\r\n\r\n    resource function get \u0027order/[string orderId]() returns http:NotFound|http:Ok {\r\n        string? status \u003d orderStatus[orderId];\r\n        if status is () {\r\n            return \u003chttp:NotFound\u003e{};\r\n        }\r\n\r\n        return \u003chttp:Ok\u003e{body: {order_id: orderId, status}};\r\n    }\r\n\r\n    resource function put \u0027order/[string orderId](@http:Payload record {|OrderItem[] order_items;|} order_items) returns http:NotFound|http:Forbidden|http:BadRequest|http:Ok {\r\n        string? status \u003d orderStatus[orderId];\r\n        if status is () {\r\n            return \u003chttp:NotFound\u003e{};\r\n        }\r\n\r\n        if status !\u003d\u003d \"pending\" {\r\n            return \u003chttp:Forbidden\u003e{body: {message: \"Cannot update order when pending!\"}};\r\n        }\r\n\r\n        if !validateOrderArray(order_items.order_items) {\r\n            return \u003chttp:BadRequest\u003e{body: {message: \"Invalid Order Array!\"}};\r\n        }\r\n\r\n        return \u003chttp:Ok\u003e{body: {order_id: orderId, total: calculateTotal(order_items.order_items)}};\r\n    }\r\n\r\n    resource function delete \u0027order/[string orderId]() returns http:NotFound|http:Forbidden|http:Ok {\r\n        string? status \u003d orderStatus[orderId];\r\n        if status is () {\r\n            return \u003chttp:NotFound\u003e{};\r\n        }\r\n\r\n        if status !\u003d\u003d \"pending\" {\r\n            return \u003chttp:Forbidden\u003e{};\r\n        }\r\n        _ \u003d orderStatus.remove(orderId);\r\n\r\n        return \u003chttp:Ok\u003e{};\r\n    }\r\n}\r\n"},{"name":"utils.bal","coveredLines":[4,8,9,13,17,18,20,24,26,30,31,34,36,37,40,41],"missedLines":[5,14,21,27],"coveragePercentage":80.0,"sourceCode":"import ballerina/constraint;\r\n\r\nfunction validateOrderPayload(OrderRequest orderPayload) returns boolean {\r\n    if orderPayload.username \u003d\u003d \"\" {\r\n        return false;\r\n    }\r\n\r\n    return validateOrderArray(orderPayload.order_items);\r\n}\r\n\r\nfunction validateOrderArray(OrderItem[] order_items) returns boolean {\r\n\r\n    if order_items.length() \u003d\u003d 0 {\r\n        return false;\r\n    }\r\n\r\n    table\u003cOrderItem\u003e key(item) itemsTable \u003d table key(item) from var item in order_items\r\n        select item;\r\n\r\n    if (itemsTable.length() \u003c order_items.length()) {\r\n        return false;\r\n    }\r\n\r\n    OrderItem[]|error isValid \u003d constraint:validate(order_items);\r\n\r\n    if isValid is error {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction calculateTotal(OrderItem[] order_items) returns int {\r\n    int total \u003d 0;\r\n\r\n    foreach var orderItem in order_items {\r\n        total +\u003d orderItem.quantity * menu.get(orderItem.item);\r\n    }\r\n\r\n    return total;\r\n}\r\n"}]}]}