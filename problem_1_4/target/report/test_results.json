{"projectName":"problem_1_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"coveredLines":41,"missedLines":1,"coveragePercentage":97.62,"moduleStatus":[{"name":"problem_1_4","totalTests":2,"passed":2,"failed":0,"skipped":0,"tests":[{"name":"processFuelRecordsTest#0","status":"PASSED"},{"name":"processFuelRecordsTest#1","status":"PASSED"}]}],"moduleCoverage":[{"name":"problem_1_4","coveredLines":41,"missedLines":1,"coveragePercentage":97.62,"sourceFiles":[{"name":"main.bal","coveredLines":[7,8,9,10,11,12,14,15,16,18,19,20,22,25,26,27,28,29,31,35,36,37,38,46,47,48,51,52],"missedLines":[49],"coveragePercentage":96.55,"sourceCode":"import ballerina/xmldata;\r\nimport ballerina/io;\r\n\r\nxmlns \"http://www.so2w.org\" as s;\r\n\r\nfunction processFuelRecords(string inputFilePath, string outputFilePath) returns error? {\r\n    xml file \u003d check io:fileReadXml(inputFilePath);\r\n    xml a \u003d file.\u003cs:FuelEvents\u003e;\r\n    xml FuelEvents \u003d a/\u003cs:FuelEvent\u003e;\r\n    record {|FuelEvent[] FuelEvent;|} rec \u003d check xmldata:toRecord(FuelEvents, false);\r\n    table\u003cEmployeeFuelRecord\u003e key(employeeId) employee_table \u003d table [];\r\n    table\u003cOdometerReading\u003e key(employeeId) odometer_readings \u003d table [];\r\n\r\n    foreach var employee in rec.FuelEvent {\r\n        boolean isRecordedBefore \u003d employee_table.hasKey(employee._employeeId);\r\n        boolean isOdometerRecordedBefore \u003d odometer_readings.hasKey(employee._employeeId);\r\n\r\n        if (isOdometerRecordedBefore) {\r\n            OdometerReading reading \u003d odometer_readings.get(employee._employeeId);\r\n            reading.readings.push(employee.odometerReading);\r\n        } else {\r\n            odometer_readings.add({employeeId: employee._employeeId, readings: [employee.odometerReading]});\r\n        }\r\n\r\n        if isRecordedBefore {\r\n            EmployeeFuelRecord recordedEmployee \u003d employee_table.get(employee._employeeId);\r\n            recordedEmployee.s\\:gasFillUpCount +\u003d 1;\r\n            recordedEmployee.s\\:totalGallons +\u003d employee.gallons;\r\n            recordedEmployee.s\\:totalFuelCost +\u003d employee.gallons * employee.gasPrice;\r\n        } else {\r\n            employee_table.add({employeeId: employee._employeeId, s\\:gasFillUpCount: 1, s\\:totalFuelCost: employee.gallons * employee.gasPrice, s\\:totalGallons: employee.gallons});\r\n        }\r\n    }\r\n\r\n    foreach var k in odometer_readings.keys() {\r\n        EmployeeFuelRecord employee \u003d employee_table.get(k);\r\n        OdometerReading reading \u003d odometer_readings.get(k);\r\n        employee.s\\:totalMilesAccrued \u003d reading.readings.pop() - reading.readings[0];\r\n    }\r\n\r\n    // foreach var k in odometer_readings.keys() {\r\n    //     Employee employee \u003d employee_table.get(k);\r\n    //     OdometerReading reading \u003d odometer_readings.get(k);\r\n    //     employee.totalMilesAccrued \u003d reading.readings[reading.readings.length()-1] - reading.readings[0];\r\n    // }\r\n    EmployeeFuelRecords records \u003d {s\\:employeeFuelRecord: employee_table.toArray()};\r\n    xml? xmlResult \u003d check xmldata:toXml(records);\r\n    if xmlResult is () {\r\n        return error(\"Parsing error.\");\r\n    }\r\n    check io:fileWriteXml(outputFilePath, xmlResult);\r\n}\r\n"},{"name":"types.bal","coveredLines":[3,4,5,7,8,10,12,14,15,16,21,26,33],"missedLines":[],"coveragePercentage":100.0,"sourceCode":"import ballerina/xmldata;\r\n\r\n@xmldata:Namespace {\r\n    uri: \"http://www.so2w.org\",\r\n    prefix: \"s\"\r\n}\r\n@xmldata:Name {\r\n    value: \"employeeFuelRecords\"\r\n}\r\npublic type EmployeeFuelRecords record {|\r\n    EmployeeFuelRecord[] s\\:employeeFuelRecord;\r\n|};\r\n\r\npublic type EmployeeFuelRecord record {|\r\n    @xmldata:Attribute\r\n    readonly int employeeId;\r\n    int s\\:gasFillUpCount;\r\n    decimal s\\:totalFuelCost;\r\n    decimal s\\:totalGallons;\r\n    int s\\:totalMilesAccrued?;\r\n|};\r\n\r\npublic type OdometerReading record {|\r\n    readonly int employeeId;\r\n    int[] readings;\r\n|};\r\n\r\npublic type FuelEvent record {|\r\n    int _employeeId;\r\n    int odometerReading;\r\n    decimal gallons;\r\n    decimal gasPrice;\r\n|};\r\n"}]}]}